// Code generated by protoc-gen-go. DO NOT EDIT.
// source: both_stream.proto

package both_stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SimpleRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleRequest) Reset()         { *m = SimpleRequest{} }
func (m *SimpleRequest) String() string { return proto.CompactTextString(m) }
func (*SimpleRequest) ProtoMessage()    {}
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a823f8839b5119d, []int{0}
}

func (m *SimpleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleRequest.Unmarshal(m, b)
}
func (m *SimpleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleRequest.Marshal(b, m, deterministic)
}
func (m *SimpleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleRequest.Merge(m, src)
}
func (m *SimpleRequest) XXX_Size() int {
	return xxx_messageInfo_SimpleRequest.Size(m)
}
func (m *SimpleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleRequest proto.InternalMessageInfo

func (m *SimpleRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type SimpleResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimpleResponse) Reset()         { *m = SimpleResponse{} }
func (m *SimpleResponse) String() string { return proto.CompactTextString(m) }
func (*SimpleResponse) ProtoMessage()    {}
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a823f8839b5119d, []int{1}
}

func (m *SimpleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleResponse.Unmarshal(m, b)
}
func (m *SimpleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleResponse.Marshal(b, m, deterministic)
}
func (m *SimpleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResponse.Merge(m, src)
}
func (m *SimpleResponse) XXX_Size() int {
	return xxx_messageInfo_SimpleResponse.Size(m)
}
func (m *SimpleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResponse proto.InternalMessageInfo

func (m *SimpleResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SimpleResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BothRequest struct {
	Question             string   `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BothRequest) Reset()         { *m = BothRequest{} }
func (m *BothRequest) String() string { return proto.CompactTextString(m) }
func (*BothRequest) ProtoMessage()    {}
func (*BothRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a823f8839b5119d, []int{2}
}

func (m *BothRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BothRequest.Unmarshal(m, b)
}
func (m *BothRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BothRequest.Marshal(b, m, deterministic)
}
func (m *BothRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BothRequest.Merge(m, src)
}
func (m *BothRequest) XXX_Size() int {
	return xxx_messageInfo_BothRequest.Size(m)
}
func (m *BothRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BothRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BothRequest proto.InternalMessageInfo

func (m *BothRequest) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

type BothResponse struct {
	Answer               string   `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BothResponse) Reset()         { *m = BothResponse{} }
func (m *BothResponse) String() string { return proto.CompactTextString(m) }
func (*BothResponse) ProtoMessage()    {}
func (*BothResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a823f8839b5119d, []int{3}
}

func (m *BothResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BothResponse.Unmarshal(m, b)
}
func (m *BothResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BothResponse.Marshal(b, m, deterministic)
}
func (m *BothResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BothResponse.Merge(m, src)
}
func (m *BothResponse) XXX_Size() int {
	return xxx_messageInfo_BothResponse.Size(m)
}
func (m *BothResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BothResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BothResponse proto.InternalMessageInfo

func (m *BothResponse) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func init() {
	proto.RegisterType((*SimpleRequest)(nil), "SimpleRequest")
	proto.RegisterType((*SimpleResponse)(nil), "SimpleResponse")
	proto.RegisterType((*BothRequest)(nil), "BothRequest")
	proto.RegisterType((*BothResponse)(nil), "BothResponse")
}

func init() { proto.RegisterFile("both_stream.proto", fileDescriptor_6a823f8839b5119d) }

var fileDescriptor_6a823f8839b5119d = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x37, 0x62, 0x17, 0x77, 0xdc, 0x5d, 0x31, 0x88, 0x2c, 0x3d, 0x49, 0x04, 0x59, 0x3d,
	0x04, 0xd1, 0x9b, 0x47, 0x1f, 0x21, 0xfb, 0x00, 0x92, 0x6d, 0x07, 0x1a, 0x68, 0x3b, 0x35, 0x49,
	0xeb, 0xeb, 0x8b, 0xd3, 0x54, 0xda, 0xdb, 0xff, 0xc3, 0x97, 0xf9, 0x26, 0x03, 0xb7, 0x67, 0x8a,
	0xd5, 0x57, 0x88, 0x1e, 0x6d, 0xa3, 0x3b, 0x4f, 0x91, 0xd4, 0x23, 0xec, 0x4e, 0xae, 0xe9, 0x6a,
	0x34, 0xf8, 0xdd, 0x63, 0x88, 0x52, 0xc2, 0x65, 0x69, 0xa3, 0x3d, 0x88, 0x07, 0x71, 0xdc, 0x18,
	0xce, 0xea, 0x03, 0xf6, 0x13, 0x14, 0x3a, 0x6a, 0x03, 0xfe, 0x51, 0x05, 0x95, 0xc8, 0x54, 0x66,
	0x38, 0xcb, 0x3b, 0xc8, 0x06, 0x5b, 0xf7, 0x78, 0xb8, 0xe0, 0xa7, 0x63, 0x51, 0xcf, 0x70, 0xfd,
	0x49, 0xb1, 0x9a, 0xc6, 0xe7, 0x70, 0xc5, 0xc1, 0x51, 0x9b, 0x14, 0xff, 0x5d, 0x3d, 0xc1, 0x76,
	0x44, 0x93, 0xe4, 0x1e, 0xd6, 0xb6, 0x0d, 0x3f, 0xe8, 0x13, 0x99, 0xda, 0x9b, 0x1b, 0x47, 0x9e,
	0xd0, 0x0f, 0xae, 0x40, 0xf9, 0x02, 0x99, 0xa1, 0x3e, 0xa2, 0xdc, 0xeb, 0xc5, 0x57, 0xf2, 0x1b,
	0xbd, 0xdc, 0x5a, 0xad, 0xa4, 0x86, 0x0d, 0x2b, 0x98, 0xdf, 0xea, 0xd9, 0x66, 0xf9, 0x4e, 0xcf,
	0xe5, 0x6a, 0x75, 0x14, 0xaf, 0xe2, 0xbc, 0xe6, 0x2b, 0xbd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xb0, 0x34, 0xf6, 0x91, 0x3a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BothServiceClient is the client API for BothService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BothServiceClient interface {
	Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	BothRoute(ctx context.Context, opts ...grpc.CallOption) (BothService_BothRouteClient, error)
}

type bothServiceClient struct {
	cc *grpc.ClientConn
}

func NewBothServiceClient(cc *grpc.ClientConn) BothServiceClient {
	return &bothServiceClient{cc}
}

func (c *bothServiceClient) Route(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/BothService/Route", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bothServiceClient) BothRoute(ctx context.Context, opts ...grpc.CallOption) (BothService_BothRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BothService_serviceDesc.Streams[0], "/BothService/BothRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &bothServiceBothRouteClient{stream}
	return x, nil
}

type BothService_BothRouteClient interface {
	Send(*BothRequest) error
	Recv() (*BothResponse, error)
	grpc.ClientStream
}

type bothServiceBothRouteClient struct {
	grpc.ClientStream
}

func (x *bothServiceBothRouteClient) Send(m *BothRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bothServiceBothRouteClient) Recv() (*BothResponse, error) {
	m := new(BothResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BothServiceServer is the server API for BothService service.
type BothServiceServer interface {
	Route(context.Context, *SimpleRequest) (*SimpleResponse, error)
	BothRoute(BothService_BothRouteServer) error
}

// UnimplementedBothServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBothServiceServer struct {
}

func (*UnimplementedBothServiceServer) Route(ctx context.Context, req *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Route not implemented")
}
func (*UnimplementedBothServiceServer) BothRoute(srv BothService_BothRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method BothRoute not implemented")
}

func RegisterBothServiceServer(s *grpc.Server, srv BothServiceServer) {
	s.RegisterService(&_BothService_serviceDesc, srv)
}

func _BothService_Route_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BothServiceServer).Route(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BothService/Route",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BothServiceServer).Route(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BothService_BothRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BothServiceServer).BothRoute(&bothServiceBothRouteServer{stream})
}

type BothService_BothRouteServer interface {
	Send(*BothResponse) error
	Recv() (*BothRequest, error)
	grpc.ServerStream
}

type bothServiceBothRouteServer struct {
	grpc.ServerStream
}

func (x *bothServiceBothRouteServer) Send(m *BothResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bothServiceBothRouteServer) Recv() (*BothRequest, error) {
	m := new(BothRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _BothService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BothService",
	HandlerType: (*BothServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Route",
			Handler:    _BothService_Route_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BothRoute",
			Handler:       _BothService_BothRoute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "both_stream.proto",
}
